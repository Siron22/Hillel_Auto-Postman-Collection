{
	"info": {
		"_postman_id": "b4ef666c-4140-482b-a9de-9fe2a4f9fbb2",
		"name": "Creating cars fom data csv.file",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21095713"
	},
	"item": [
		{
			"name": "1. Register user in system Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"/*\r",
							"randomFirstName = JSON.stringify(pm.variables.replaceIn('{{$randomFirstName}}'));\r",
							"console.log(randomFirstName);\r",
							"pm.environment.set('FirstName', randomFirstName);\r",
							"*/\r",
							"\r",
							"randomFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
							"console.log(randomFirstName);\r",
							"pm.environment.set('randomFirstName', randomFirstName);\r",
							"\r",
							"randomLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
							"console.log(randomLastName);\r",
							"pm.environment.set('randomLastName', randomLastName);\r",
							"\r",
							"randomEmail = pm.variables.replaceIn('{{$randomEmail}}');\r",
							"console.log(randomEmail);\r",
							"pm.environment.set('randomEmail', randomEmail);\r",
							"\r",
							"randomPassword = pm.variables.replaceIn('{{$randomWeekday}}')+1+\"XxXx\";\r",
							"console.log(randomPassword);\r",
							"pm.environment.set('randomPassword', randomPassword)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Tests if user was created correctly\r",
							"if(jsonData.status == \"ok\"){\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
							"});\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Data include test\", function () {\r",
							"   pm.expect(jsonData.data).to.deep.include({\r",
							"        \"distanceUnits\": \"km\",\r",
							"        \"currency\": \"usd\"\r",
							"    })\r",
							"});\r",
							"pm.test(\"Data keys test\", function () {\r",
							"   pm.expect(jsonData.data).to.have.keys(\"userId\",\"distanceUnits\",\"currency\")\r",
							"});\r",
							"pm.test(\"Status is ok\", function () {\r",
							"        pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							"pm.test(\"Distanceunits is km\", function () {\r",
							"        pm.expect(jsonData.data.distanceUnits).to.eql(\"km\");\r",
							"});\r",
							"pm.test(\"Currency is usd\", function () {\r",
							"        pm.expect(jsonData.data.currency).to.eql(\"usd\");\r",
							"});\r",
							"pm.test(\"UserId is number\", function () {\r",
							"        pm.expect(jsonData.data.userId).to.be.a(\"number\");\r",
							"});\r",
							"}\r",
							"else{console.log(\"User was not created\")};\r",
							"\r",
							"//Variables for the next requests\r",
							"if(jsonData.status == \"ok\"){\r",
							"pm.environment.set(\"UserId\", jsonData.data.userId);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{   \"name\": \"{{randomFirstName}}\",\r\n    \"lastName\": \"{{randomLastName}}\",\r\n    \"email\": \"{{randomEmail}}\",\r\n    \"password\": \"{{randomPassword}}\",\r\n    \"repeatPassword\": \"{{randomPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{mainUrl}}auth/signup",
					"host": [
						"{{mainUrl}}auth"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Add new car Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"console.log (pm.iterationData.get(\"carBrandId\"));\r",
							"console.log (pm.iterationData.get(\"carModelId\"));\r",
							"console.log (pm.iterationData.get(\"mileage\"));\r",
							"\r",
							"if(jsonData.status == \"ok\"){\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"Body keys test\", function () {\r",
							"   pm.expect(jsonData).to.have.keys(\"status\",\"data\")\r",
							"});\r",
							"pm.test(\"Status is ok\", function () {\r",
							"        pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							"pm.test(\"Data elements have keys\", function () {\r",
							"    pm.expect(jsonData.data).to.have.keys(\r",
							"    \"id\",\r",
							"    \"carBrandId\",\r",
							"    \"carModelId\",\r",
							"    \"initialMileage\",\r",
							"    \"updatedMileageAt\",\r",
							"    \"mileage\",\r",
							"    \"brand\",\r",
							"    \"model\",\r",
							"    \"logo\"\r",
							"    );\r",
							"});\r",
							"pm.test(\"Data is an Object\", function () {\r",
							"    pm.expect(jsonData.data).to.be.an('object')    \r",
							"});\r",
							"//переменая на CarId\r",
							"var car4Id = jsonData.data.id\r",
							"console.log (car4Id)\r",
							"pm.environment.set(\"car4Id\", car4Id);\r",
							"//Переменная на автомобиль\r",
							"var car4 = jsonData.data\r",
							"console.log (car4)\r",
							"pm.environment.set(\"car4\", car4);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carBrandId\": {{carBrandId}},\r\n  \"carModelId\": {{carModelId}},\r\n  \"mileage\": {{mileage}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://qauto.forstudy.space/api/cars",
					"protocol": "https",
					"host": [
						"qauto",
						"forstudy",
						"space"
					],
					"path": [
						"api",
						"cars"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Delete user`s account Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"if(jsonData.status == \"ok\"){\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body({\"status\":\"ok\"});\r",
							"});\r",
							"pm.test(\"Status is OK\", function () {\r",
							"        pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							"\r",
							"\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{mainUrl}}users",
					"host": [
						"{{mainUrl}}users"
					]
				}
			},
			"response": []
		}
	]
}